// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product/product.proto

package go_micro_service_product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Product service

func NewProductEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Product service

type ProductService interface {
	// 发布一个产品
	AddProduct(ctx context.Context, in *AddProductReq, opts ...client.CallOption) (*AddProductRes, error)
	// 删除发布产品
	DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...client.CallOption) (*DeleteProductRes, error)
	// 申请交换产品
	ApplyExchangeProduct(ctx context.Context, in *ApplyExchangeProductReq, opts ...client.CallOption) (*ApplyExchangeProductRes, error)
	// 同意/拒绝交换产品
	HandleApplyExchangeProduct(ctx context.Context, in *HandleApplyExchangeProductReq, opts ...client.CallOption) (*HandleApplyExchangeProductRes, error)
	// 获取产品详情
	GetProduct(ctx context.Context, in *GetProductReq, opts ...client.CallOption) (*GetProductRes, error)
	// 获取产品列表
	GetProducts(ctx context.Context, in *GetProductsReq, opts ...client.CallOption) (*GetProductsRes, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) AddProduct(ctx context.Context, in *AddProductReq, opts ...client.CallOption) (*AddProductRes, error) {
	req := c.c.NewRequest(c.name, "Product.AddProduct", in)
	out := new(AddProductRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...client.CallOption) (*DeleteProductRes, error) {
	req := c.c.NewRequest(c.name, "Product.DeleteProduct", in)
	out := new(DeleteProductRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ApplyExchangeProduct(ctx context.Context, in *ApplyExchangeProductReq, opts ...client.CallOption) (*ApplyExchangeProductRes, error) {
	req := c.c.NewRequest(c.name, "Product.ApplyExchangeProduct", in)
	out := new(ApplyExchangeProductRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) HandleApplyExchangeProduct(ctx context.Context, in *HandleApplyExchangeProductReq, opts ...client.CallOption) (*HandleApplyExchangeProductRes, error) {
	req := c.c.NewRequest(c.name, "Product.HandleApplyExchangeProduct", in)
	out := new(HandleApplyExchangeProductRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetProduct(ctx context.Context, in *GetProductReq, opts ...client.CallOption) (*GetProductRes, error) {
	req := c.c.NewRequest(c.name, "Product.GetProduct", in)
	out := new(GetProductRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetProducts(ctx context.Context, in *GetProductsReq, opts ...client.CallOption) (*GetProductsRes, error) {
	req := c.c.NewRequest(c.name, "Product.GetProducts", in)
	out := new(GetProductsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Product service

type ProductHandler interface {
	// 发布一个产品
	AddProduct(context.Context, *AddProductReq, *AddProductRes) error
	// 删除发布产品
	DeleteProduct(context.Context, *DeleteProductReq, *DeleteProductRes) error
	// 申请交换产品
	ApplyExchangeProduct(context.Context, *ApplyExchangeProductReq, *ApplyExchangeProductRes) error
	// 同意/拒绝交换产品
	HandleApplyExchangeProduct(context.Context, *HandleApplyExchangeProductReq, *HandleApplyExchangeProductRes) error
	// 获取产品详情
	GetProduct(context.Context, *GetProductReq, *GetProductRes) error
	// 获取产品列表
	GetProducts(context.Context, *GetProductsReq, *GetProductsRes) error
}

func RegisterProductHandler(s server.Server, hdlr ProductHandler, opts ...server.HandlerOption) error {
	type product interface {
		AddProduct(ctx context.Context, in *AddProductReq, out *AddProductRes) error
		DeleteProduct(ctx context.Context, in *DeleteProductReq, out *DeleteProductRes) error
		ApplyExchangeProduct(ctx context.Context, in *ApplyExchangeProductReq, out *ApplyExchangeProductRes) error
		HandleApplyExchangeProduct(ctx context.Context, in *HandleApplyExchangeProductReq, out *HandleApplyExchangeProductRes) error
		GetProduct(ctx context.Context, in *GetProductReq, out *GetProductRes) error
		GetProducts(ctx context.Context, in *GetProductsReq, out *GetProductsRes) error
	}
	type Product struct {
		product
	}
	h := &productHandler{hdlr}
	return s.Handle(s.NewHandler(&Product{h}, opts...))
}

type productHandler struct {
	ProductHandler
}

func (h *productHandler) AddProduct(ctx context.Context, in *AddProductReq, out *AddProductRes) error {
	return h.ProductHandler.AddProduct(ctx, in, out)
}

func (h *productHandler) DeleteProduct(ctx context.Context, in *DeleteProductReq, out *DeleteProductRes) error {
	return h.ProductHandler.DeleteProduct(ctx, in, out)
}

func (h *productHandler) ApplyExchangeProduct(ctx context.Context, in *ApplyExchangeProductReq, out *ApplyExchangeProductRes) error {
	return h.ProductHandler.ApplyExchangeProduct(ctx, in, out)
}

func (h *productHandler) HandleApplyExchangeProduct(ctx context.Context, in *HandleApplyExchangeProductReq, out *HandleApplyExchangeProductRes) error {
	return h.ProductHandler.HandleApplyExchangeProduct(ctx, in, out)
}

func (h *productHandler) GetProduct(ctx context.Context, in *GetProductReq, out *GetProductRes) error {
	return h.ProductHandler.GetProduct(ctx, in, out)
}

func (h *productHandler) GetProducts(ctx context.Context, in *GetProductsReq, out *GetProductsRes) error {
	return h.ProductHandler.GetProducts(ctx, in, out)
}
